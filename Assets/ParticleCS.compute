// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

uint rng_state;
float deltaTime;
float2 mousePosition;

#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise3D.hlsl"

uint rand_lcg()
{
	// LCG values from Numerical Recipes
	rng_state = 1664525 * rng_state + 1013904223;
	return rng_state;
}

uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}
float3 snoiseVec3(float3 x) {

	float s = snoise(x);
	float s1 = snoise(float3(x.y - 19.1, x.z + 33.4, x.x + 47.2));
	float s2 = snoise(float3(x.z + 74.2, x.x - 124.5, x.y + 99.4));
	float3 c = float3(s, s1, s2);
	return c;
}

float3 curlNoise(float3 p) {

	const float e = .1;
	float3 dx = float3(e, 0.0, 0.0);
	float3 dy = float3(0.0, e, 0.0);
	float3 dz = float3(0.0, 0.0, e);

	float3 p_x0 = snoiseVec3(p - dx);
	float3 p_x1 = snoiseVec3(p + dx);
	float3 p_y0 = snoiseVec3(p - dy);
	float3 p_y1 = snoiseVec3(p + dy);
	float3 p_z0 = snoiseVec3(p - dz);
	float3 p_z1 = snoiseVec3(p + dz);

	float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
	float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
	float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

	const float divisor = 1.0 / (2.0 * e);
	return normalize(float3(x, y, z) * divisor);

}

struct Particle {
	float3 position;
	float3 velocity;
	float life;
};

RWStructuredBuffer<Particle> buffer;

[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	rng_state = id.x;
	uint r0 = rand_xorshift();
	uint r1 = rand_xorshift();
	uint r2 = rand_xorshift();

	buffer[id.x].velocity += float3(float(r0) * 0.2134, float(r1) * 0.5463, float(r2) * 0.8754);
	if (length(buffer[id.x].velocity > 1.0)) {
		normalize(buffer[id.x].velocity);
	}
	buffer[id.x].life -= deltaTime;
	buffer[id.x].position += curlNoise(buffer[id.x].position * 0.1) * 0.1;
	// buffer[id.x].position = float3(0, 0, 15);
	if (buffer[id.x].life < 0)
	{

		float f0 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float f1 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float f2 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float3 normalF3 = normalize(float3(f0, f1, f2)) * 0.8f;
		//normalF3 *= 10;
		normalF3 *= float(rand_xorshift()) * (1.0 / 4294967296.0);
		float3 pos = float3(normalF3.x, normalF3.y, normalF3.z);
		buffer[id.x].position = float3(normalF3.x + mousePosition.x, normalF3.y + mousePosition.y, normalF3.z + 3.0);
		buffer[id.x].life = 1.5;
	}
	// buffer[id.x].position += pos * deltaTime;;


}
